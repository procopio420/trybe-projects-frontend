{"ast":null,"code":"var _jsxFileName = \"/home/procopio/Projetos/trybe-github/src/pages/Dashboard/index.tsx\";\nimport React, { useState, useEffect } from 'react';\nimport { FiChevronRight, FiX } from 'react-icons/fi';\nimport { Link } from 'react-router-dom';\nimport api from '../../services/api';\nimport Select from 'react-select';\nimport logoImg from \"../../assets/logo.svg\";\nimport { Title, Form, Repositories, Error, Repository } from './styles';\n\nconst Dashboard = () => {\n  const options = [{\n    value: 1,\n    label: 'Turma 1'\n  }, {\n    value: 2,\n    label: 'Turma 2'\n  }, {\n    value: 3,\n    label: 'Turma 3'\n  }, {\n    value: 4,\n    label: 'Turma 4'\n  }, {\n    value: 5,\n    label: 'Turma 5'\n  }];\n  const [team, setTeam] = useState(0);\n  const [newRepoName, setNewRepoName] = useState('');\n  const [inputErrorName, setInputErrorName] = useState('');\n  const [repositories, setRepositories] = useState(() => {\n    const storagedRepositories = localStorage.getItem('@GithubExplorer:repositories');\n\n    if (storagedRepositories) {\n      return JSON.parse(storagedRepositories);\n    }\n\n    return [];\n  });\n  useEffect(() => {\n    localStorage.setItem('@GithubExplorer:repositories', JSON.stringify(repositories));\n  }, [repositories]); //@ts-ignore\n\n  async function handleChange(teamSelected) {\n    setTeam(teamSelected);\n    console.log(team);\n  }\n\n  async function handleAddRepository(event) {\n    setInputErrorName('');\n\n    if (!newRepoName) {\n      setInputErrorName('Digite o nome do repositório do projeto!');\n      return false;\n    }\n\n    try {\n      const response = await api.get(`repos/tryber/${newRepoName}`);\n      const repository = response.data;\n      setRepositories([...repositories, repository]);\n      setNewRepoName('');\n      setInputErrorName('');\n    } catch (e) {\n      setInputErrorName('Erro! Projeto não encontrado, por favor, digite o nome do repositório do projeto completo.');\n    }\n\n    return true;\n  }\n\n  async function handleDeleteRepository(repo) {\n    const newRepositories = await repositories.filter(rep => rep.full_name !== repo.full_name);\n    localStorage.setItem('@GithubExplorer:repositories', JSON.stringify(newRepositories));\n    setRepositories(newRepositories);\n  }\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"img\", {\n    src: logoImg,\n    alt: \"Github Explorer\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Title, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 7\n    }\n  }, \"Acompanhe os projetos Trybe\"), /*#__PURE__*/React.createElement(Form, {\n    hasError: !!inputErrorName,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Select, {\n    value: team,\n    onChange: handleChange,\n    options: options,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    type: \"submit\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 9\n    }\n  }, \"Pesquisar\")), inputErrorName && /*#__PURE__*/React.createElement(Error, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 26\n    }\n  }, inputErrorName), /*#__PURE__*/React.createElement(Repositories, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 7\n    }\n  }, repositories.map(repository => /*#__PURE__*/React.createElement(Repository, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    onClick: () => handleDeleteRepository(repository),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(FiX, {\n    size: 30,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 15\n    }\n  })), /*#__PURE__*/React.createElement(Link, {\n    key: repository.full_name,\n    to: `/repository/${repository.full_name}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"img\", {\n    src: repository.owner.avatar_url,\n    alt: repository.owner.login,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 15\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"strong\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 17\n    }\n  }, repository.name), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 17\n    }\n  }, repository.description))), /*#__PURE__*/React.createElement(FiChevronRight, {\n    size: 20,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 13\n    }\n  })))));\n};\n\nexport default Dashboard;","map":{"version":3,"sources":["/home/procopio/Projetos/trybe-github/src/pages/Dashboard/index.tsx"],"names":["React","useState","useEffect","FiChevronRight","FiX","Link","api","Select","Title","Form","Repositories","Error","Repository","Dashboard","options","value","label","team","setTeam","newRepoName","setNewRepoName","inputErrorName","setInputErrorName","repositories","setRepositories","storagedRepositories","localStorage","getItem","JSON","parse","setItem","stringify","handleChange","teamSelected","console","log","handleAddRepository","event","response","get","repository","data","e","handleDeleteRepository","repo","newRepositories","filter","rep","full_name","logoImg","map","owner","avatar_url","login","name","description"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, FormEvent } from 'react';\nimport { FiChevronRight, FiX } from 'react-icons/fi';\nimport { Link } from 'react-router-dom';\nimport api from '../../services/api';\nimport Select from 'react-select';\n\nimport logoImg from '../../assets/logo.svg';\n\nimport { Title, Form, Repositories, Error, Repository } from './styles';\n\ninterface Repository {\n  full_name: string;\n  name: string;\n  description: string;\n  owner: {\n    login: string;\n    avatar_url: string;\n  };\n}\n\nconst Dashboard: React.FC = () => {\n  const options = [\n    {value: 1, label: 'Turma 1'},\n    {value: 2, label: 'Turma 2'},\n    {value: 3, label: 'Turma 3'},\n    {value: 4, label: 'Turma 4'},\n    {value: 5, label: 'Turma 5'},\n  ];\n  const [team, setTeam] = useState(0);\n  const [newRepoName, setNewRepoName] = useState('');\n  const [inputErrorName, setInputErrorName] = useState('');\n  const [repositories, setRepositories] = useState<Repository[]>(() => {\n    const storagedRepositories = localStorage.getItem(\n      '@GithubExplorer:repositories',\n    );\n    if (storagedRepositories) {\n      return JSON.parse(storagedRepositories);\n    }\n    return [];\n  });\n\n  useEffect(() => {\n    localStorage.setItem(\n      '@GithubExplorer:repositories',\n      JSON.stringify(repositories),\n    );\n  }, [repositories]);\n\n  //@ts-ignore\n  async function handleChange(teamSelected):Promise<void> {\n    setTeam(teamSelected);\n    console.log(team);\n\n  }\n\n  async function handleAddRepository(\n    event: FormEvent<HTMLFormElement>,\n  ): Promise<boolean> {\n    \n\n    setInputErrorName('');\n\n    if (!newRepoName) {\n      setInputErrorName('Digite o nome do repositório do projeto!');\n      return false;\n    }\n\n    try {\n      const response = await api.get<Repository>(`repos/tryber/${newRepoName}`);\n      const repository = response.data;\n\n      setRepositories([...repositories, repository]);\n      setNewRepoName('');\n      setInputErrorName('');\n    } catch (e) {\n      setInputErrorName(\n        'Erro! Projeto não encontrado, por favor, digite o nome do repositório do projeto completo.',\n      );\n    }\n    return true;\n  }\n\n  async function handleDeleteRepository(repo: Repository): Promise<void> {\n    const newRepositories = await repositories.filter(\n      (rep) => rep.full_name !== repo.full_name,\n    );\n    localStorage.setItem(\n      '@GithubExplorer:repositories',\n      JSON.stringify(newRepositories),\n    );\n    setRepositories(newRepositories);\n  }\n\n  return (\n    <>\n      <img src={logoImg} alt=\"Github Explorer\" />\n      <Title>Acompanhe os projetos Trybe</Title>\n\n      <Form hasError={!!inputErrorName}>\n        <Select\n          value={team}\n          onChange={handleChange}\n          options={options}\n        />\n        <button type=\"submit\">Pesquisar</button>\n      </Form>\n\n      {inputErrorName && <Error>{inputErrorName}</Error>}\n\n      <Repositories>\n        {repositories.map((repository) => (\n          <Repository>\n            <button onClick={() => handleDeleteRepository(repository)}>\n              <FiX size={30} />\n            </button>\n            <Link\n              key={repository.full_name}\n              to={`/repository/${repository.full_name}`}\n            >\n              <img\n                src={repository.owner.avatar_url}\n                alt={repository.owner.login}\n              />\n              <div>\n                <strong>{repository.name}</strong>\n                <p>{repository.description}</p>\n              </div>\n            </Link>\n            <FiChevronRight size={20} />\n          </Repository>\n        ))}\n      </Repositories>\n    </>\n  );\n};\n\nexport default Dashboard;\n"]},"metadata":{},"sourceType":"module"}